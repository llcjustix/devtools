version: '3.8'
name: infrastructure
services:
  #------------------------------------------ PostgreSQL Database -------------------------------------------------------#
  postgres:
    container_name: postgreSQL
    image: postgres:15.4
    command: [ "postgres", "-c", "max_connections=200", "-c", "shared_buffers=24MB", "-c", "listen_addresses=*" ]
    environment:
      POSTGRES_DB: ${POSTGRES_DB:-justix_academy_db}
      POSTGRES_USER: ${POSTGRES_USER:-postgres}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD:-postgres}
    healthcheck:
      test: [ "CMD-SHELL", "pg_isready -U postgres -d justix_academy_db" ]
      interval: 10s
      timeout: 5s
      retries: 5
    ports:
      - "5432:5432"
    networks:
      - infra-network
    volumes:
      - ./db/init_dbs.sql:/docker-entrypoint-initdb.d/01-init-dbs.sql
      - postgres_data:/var/lib/postgresql/data

  #------------------------------------------- Keycloak -----------------------------------------------------------------#
  keycloak:
    container_name: keycloak
    image: quay.io/keycloak/keycloak:25.0.4
    restart: on-failure
    command: >
      start-dev
      --http-enabled=true
      --import-realm
      --verbose
      --features=scripts
    working_dir: /opt/keycloak
    volumes:
      - ./keycloak:/opt/keycloak/data/import
    ports:
      - "8080:8080"
    environment:
      KC_FEATURES: "scripts"
      KC_DB: postgres
      KC_DB_URL_HOST: postgres
      KC_DB_URL_DATABASE: keycloak_db
      KC_DB_PASSWORD: postgres
      KC_DB_USERNAME: postgres
      KEYCLOAK_ADMIN: admin
      KEYCLOAK_ADMIN_PASSWORD: admin
      KC_HEALTH_ENABLED: true
      KC_METRICS_ENABLED: true
      KC_HOSTNAME_STRICT: false
      KC_HOSTNAME_STRICT_HTTPS: false
    depends_on:
      - postgres
    healthcheck:
      test: [ "CMD", "curl", "-f", "http://keycloak:8080/health/ready" ]
      interval: 15s
      timeout: 2s
      retries: 15
    networks:
      - infra-network

  #------------------------------------------ Redis ---------------------------------------------------------------------#
  redis:
    container_name: redis
    image: redis:7.2-alpine
    ports:
      - "6379:6379"
    environment:
      REDIS_PASSWORD: ${REDIS_PASSWORD:-password}
    command: redis-server --requirepass ${REDIS_PASSWORD:-password}
    volumes:
      - redis_data:/data
    networks:
      - infra-network
    healthcheck:
      test: [ "CMD", "redis-cli", "ping" ]
      interval: 10s
      timeout: 5s
      retries: 5
  #------------------------------------------ Redis insight -------------------------------------------------------------#
  redis-insight:
    container_name: redis-insight
    image: redis/redisinsight:latest
    restart: always
    ports:
      - '5540:5540'
    volumes:
      - redis_insight_data:/data
    depends_on:
      - redis
    networks:
      - infra-network
    environment:
      - REDIS_HOSTS=local:redis:6379:${REDIS_PASSWORD:-password}
  #--------------------------------------------- MinIO ------------------------------------------------------------------#
  minio:
    container_name: minio
    image: quay.io/minio/minio:RELEASE.2024-05-10T01-41-38Z
    restart: unless-stopped
    environment:
      MINIO_ROOT_USER: ${MINIO_ROOT_USER:-admin}
      MINIO_ROOT_PASSWORD: ${MINIO_ROOT_PASSWORD:-admin}
    volumes:
      - minio_data:/data
    ports:
      - '9000:9000'
      - '9001:9001'
    command: server /data --console-address ":9001"
    healthcheck:
      test: curl -f http://localhost:9000/minio/health/live || exit 1
      interval: 30s
      timeout: 10s
      retries: 5
    networks:
      - infra-network

  #---------------------------------------------------KAFKA--------------------------------------------------------------#
  kafka:
    container_name: kafka
    image: confluentinc/cp-kafka:latest
    restart: always
    ports:
      - '9092:9092'
      - "29092:29092"
    environment:
      KAFKA_NODE_ID: 1
      KAFKA_PROCESS_ROLES: broker,controller
      KAFKA_CONTROLLER_QUORUM_VOTERS: 1@kafka:29093
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: PLAINTEXT:PLAINTEXT,CONTROLLER:PLAINTEXT,PLAINTEXT_HOST:PLAINTEXT
      KAFKA_LISTENERS: PLAINTEXT://0.0.0.0:29092,PLAINTEXT_HOST://0.0.0.0:9092,CONTROLLER://0.0.0.0:29093
      KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://kafka:29092,PLAINTEXT_HOST://localhost:9092
      KAFKA_CONTROLLER_LISTENER_NAMES: CONTROLLER
      KAFKA_INTER_BROKER_LISTENER_NAME: PLAINTEXT
      KAFKA_AUTO_CREATE_TOPICS_ENABLE: true
      KAFKA_LOG_DIRS: /var/lib/kafka/data
      CLUSTER_ID: mk01-cluster-id-1234567890
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1
      KAFKA_TRANSACTION_STATE_LOG_REPLICATION_FACTOR: 1
      KAFKA_TRANSACTION_STATE_LOG_MIN_ISR: 1
      KAFKA_DEFAULT_REPLICATION_FACTOR: 1
      KAFKA_MIN_IN_SYNC_REPLICAS: 1

    healthcheck:
      test: [ "CMD-SHELL", "kafka-topics.sh --bootstrap-server kafka:29092 --list || exit 1" ]
      interval: 15s
      timeout: 10s
      retries: 5

    volumes:
      - kafka_data:/bitnami/kafka
    networks:
      - infra-network

  #------------------------------------------------------KAFKA-UI--------------------------------------------------------#
  kafka-ui:
    container_name: kafka-ui
    image: provectuslabs/kafka-ui:latest
    restart: always
    ports:
      - '8000:8080'
    environment:
      KAFKA_CLUSTERS_0_NAME: Kafka-V35
      KAFKA_CLUSTERS_0_BOOTSTRAPSERVERS: kafka:29092
      DYNAMIC_CONFIG_ENABLED: true
      KAFKA_CLUSTERS_0_READ_ONLY: false
      KAFKA_CLUSTERS_0_AUDIT_TOPICAUDITENABLED: true
      KAFKA_CLUSTERS_0_AUDIT_CONSOLEAUDITENABLED: true
      LOGGING_LEVEL_ROOT: INFO
      LOGGING_LEVEL_COM_PROVECTUS: DEBUG

    healthcheck:
      test: [ "CMD", "curl", "-f", "http://localhost:8080" ]
      interval: 15s
      timeout: 5s
      retries: 5

    depends_on:
      - kafka
    networks:
      - infra-network
  #------------------------------------------- Volumes ------------------------------------------------------------------#
  liquibase:
    image: liquibase/liquibase:latest
    container_name: liquibase-runner
    environment:
      DB_HOST: ${DB_HOST:-host.docker.internal}  # Use this for local PostgreSQL
      DB_PORT: ${DB_PORT:-5432}
      DB_NAME: ${DB_NAME:-justix_academy_db}
      DB_USER: ${DB_USER:-postgres}
      DB_PASSWORD: ${DB_PASSWORD:-postgres}
    volumes:
      - .:/workspace
    working_dir: /workspace
    entrypoint:
      - "/bin/sh"
      - "-c"
      - |
        liquibase \
          --url=jdbc:postgresql://$$DB_HOST:$$DB_PORT/$$DB_NAME \
          --username=$$DB_USER \
          --password=$$DB_PASSWORD \
          --changeLogFile=db/changelog/db.changelog-master.xml \
          update
#------------------------------------------- Volumes ------------------------------------------------------------------#
volumes:
  kafka_data:
    driver: local
  redis_data:
    driver: local
  postgres_data:
    driver: local
  minio_data:
    driver: local
  redis_insight_data:
    driver: local
#---------------------------------------------- Networks --------------------------------------------------------------#
networks:
  infra-network:
    driver: bridge
