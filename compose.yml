services:
  #------------------------------------------ PostgreSQL Database ------------------------------------------------------
  postgres:
    container_name: postgresql
    image: postgres:latest
    command: [ "postgres", "-c", "max_connections=200", "-c", "shared_buffers=24MB", "-c", "listen_addresses=*" ]
    environment:
      POSTGRES_DB: ${POSTGRES_DB}
      POSTGRES_USER: ${POSTGRES_USER}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
    healthcheck:
      test: [ "CMD-SHELL", "pg_isready -U $${POSTGRES_USER} -d $${POSTGRES_DB}" ]
      interval: 10s
      timeout: 5s
      retries: 5
    ports:
      - "5432:5432"
    networks:
      - infra-network
    volumes:
      - ./db/schema.sql:/docker-entrypoint-initdb.d/schema.sql
      - ./data/postgres:/var/data/postgresql
  #------------------------------------------- Keycloak ----------------------------------------------------------------
  keycloak:
    container_name: keycloak
    image: quay.io/keycloak/keycloak:latest
    command: [ "start-dev", "--import-realm", "--hostname-strict=false" ]
    environment:
      KC_BOOTSTRAP_ADMIN_USERNAME: ${KC_BOOTSTRAP_ADMIN_USERNAME}
      KC_BOOTSTRAP_ADMIN_PASSWORD: ${KC_BOOTSTRAP_ADMIN_PASSWORD}
      KC_DB: postgres
      KC_DB_SCHEMA: keycloak
      KC_DB_USERNAME: ${KC_DB_USERNAME}
      KC_DB_PASSWORD: ${KC_DB_PASSWORD}
      KC_DB_URL_HOST: ${KC_DB_URL_HOST}
      KC_DB_URL_PORT: ${KC_DB_URL_PORT}
      KC_DB_URL_DATABASE: ${KC_DB_URL_DATABASE}
      KC_DB_URL_PROPERTIES: "?sslmode=${KC_DB_SSLMODE}"
      KC_HTTP_ENABLED: "true"
      KC_HEALTH_ENABLED: "true"
      KC_METRICS_ENABLED: "true"
    depends_on:
      postgres:
        condition: service_healthy
    ports:
      - "8080:8080"
    volumes:
      - ./keycloak/:/opt/keycloak/data/import
    healthcheck:
      test: [ "CMD", "/opt/keycloak/bin/kc.sh", "show-config" ]
      interval: 15s
      timeout: 5s
      retries: 15
    networks:
      - infra-network
  #------------------------------------------- Keycloak Init------------------------------------------------------------
  keycloak-init:
    container_name: keycloak-init
    image: postgres:latest
    depends_on:
      keycloak:
        condition: service_healthy
    networks:
      - infra-network
    entrypoint: >
      bash -c "sleep 10 &&
      PGPASSWORD=passwd psql -h postgres -U postgres -d academy -c \"UPDATE keycloak.realm SET ssl_required='NONE' WHERE name='master';\""
  #------------------------------------------ Redis --------------------------------------------------------------------
  redis:
    container_name: redis
    image: redis:latest
    ports:
      - "6379:6379"
    environment:
      REDIS_PASSWORD: ${REDIS_PASSWORD:-password}
    command: redis-server --requirepass ${REDIS_PASSWORD}
    volumes:
      - ./data/redis:/data
    networks:
      - infra-network
    healthcheck:
      test: [ "CMD", "redis-cli", "ping" ]
      interval: 10s
      timeout: 5s
      retries: 5
  #------------------------------------------ Redis insight -------------------------------------------------------------#
  redis-insight:
    container_name: redis-insight
    image: redis/redisinsight:latest
    restart: always
    ports:
      - '5540:5540'
    volumes:
      - ./data/redis:/data
    depends_on:
      redis:
        condition: service_healthy
    networks:
      - infra-network
    environment:
      - REDIS_HOSTS=local:host=redis,port=6379,password=${REDIS_PASSWORD:-password}
  #--------------------------------------------- MinIO ------------------------------------------------------------------#
  minio:
    container_name: minio
    image: minio/minio:latest
    restart: unless-stopped
    environment:
      MINIO_ROOT_USER: ${MINIO_ROOT_USER:-admin}
      MINIO_ROOT_PASSWORD: ${MINIO_ROOT_PASSWORD:-admin}
    volumes:
      - ./data/minio:/data
    ports:
      - '9000:9000'
      - '9001:9001'
    command: server /data --console-address ":9001"
    healthcheck:
      test: curl -f http://localhost:9000/minio/health/live || exit 1
      interval: 30s
      timeout: 10s
      retries: 5
    networks:
      - infra-network

  #---------------------------------------------------KAFKA-------------------------------------------------------------
  kafka:
    container_name: kafka
    image: confluentinc/cp-kafka:latest
    restart: always
    ports:
      - '9092:9092'
      - "29092:29092"
    environment:
      KAFKA_NODE_ID: 1
      KAFKA_PROCESS_ROLES: broker,controller
      KAFKA_CONTROLLER_QUORUM_VOTERS: 1@kafka:29093
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: PLAINTEXT:PLAINTEXT,CONTROLLER:PLAINTEXT,PLAINTEXT_HOST:PLAINTEXT
      KAFKA_LISTENERS: PLAINTEXT://0.0.0.0:29092,PLAINTEXT_HOST://0.0.0.0:9092,CONTROLLER://0.0.0.0:29093
      KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://kafka:29092,PLAINTEXT_HOST://localhost:9092
      KAFKA_CONTROLLER_LISTENER_NAMES: CONTROLLER
      KAFKA_INTER_BROKER_LISTENER_NAME: PLAINTEXT
      KAFKA_AUTO_CREATE_TOPICS_ENABLE: true
      KAFKA_LOG_DIRS: /var/lib/kafka/data
      CLUSTER_ID: mk01-cluster-id-1234567890
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1
      KAFKA_TRANSACTION_STATE_LOG_REPLICATION_FACTOR: 1
      KAFKA_TRANSACTION_STATE_LOG_MIN_ISR: 1
      KAFKA_DEFAULT_REPLICATION_FACTOR: 1
      KAFKA_MIN_IN_SYNC_REPLICAS: 1
    healthcheck:
      test: [ "CMD-SHELL", "nc -z localhost 29092 || exit 1" ]
      interval: 15s
      timeout: 10s
      retries: 5
    volumes:
      - ./data/kafka:/var/lib/kafka/data
    networks:
      - infra-network

  #------------------------------------------------------KAFKA-UI-------------------------------------------------------
  kafka-ui:
    container_name: kafka-ui
    image: provectuslabs/kafka-ui:latest
    restart: always
    ports:
      - '8000:8080'
    environment:
      KAFKA_CLUSTERS_0_NAME: Kafka-V35
      KAFKA_CLUSTERS_0_BOOTSTRAPSERVERS: kafka:29092
      DYNAMIC_CONFIG_ENABLED: true
      KAFKA_CLUSTERS_0_READ_ONLY: false
      KAFKA_CLUSTERS_0_AUDIT_TOPICAUDITENABLED: true
      KAFKA_CLUSTERS_0_AUDIT_CONSOLEAUDITENABLED: true
      LOGGING_LEVEL_ROOT: INFO
      LOGGING_LEVEL_COM_PROVECTUS: DEBUG
    healthcheck:
      test: [ "CMD", "curl", "-f", "http://localhost:8080" ]
      interval: 15s
      timeout: 5s
      retries: 5
    depends_on:
      kafka:
        condition: service_healthy
    networks:
      - infra-network

  #------------------------------------------ JITSI MEET STACK ---------------------------------------------------------
  # Custom Prosody with webhook module (built from Dockerfile)
  jitsi-prosody:
    build:
      context: ./jitsi/prosody
      dockerfile: Dockerfile
    image: justix/jitsi-prosody:latest
    container_name: jitsi-prosody
    restart: unless-stopped
    expose:
      - '5222'
      - '5347'
      - '5280'
    environment:
      - ENABLE_AUTH=1
      - ENABLE_GUESTS=1
      - AUTH_TYPE=jwt
      - JWT_APP_ID=jitsi
      - JWT_APP_SECRET=${JWT_APP_SECRET}
      - XMPP_DOMAIN=meet.jitsi
      - XMPP_AUTH_DOMAIN=auth.meet.jitsi
      - XMPP_MUC_DOMAIN=muc.meet.jitsi
      - XMPP_INTERNAL_MUC_DOMAIN=internal-muc.meet.jitsi
      - XMPP_GUEST_DOMAIN=guest.meet.jitsi
      - JICOFO_COMPONENT_SECRET=${JICOFO_COMPONENT_SECRET}
      - JICOFO_AUTH_PASSWORD=${JICOFO_AUTH_PASSWORD}
      - JVB_AUTH_PASSWORD=${JVB_AUTH_PASSWORD}
      - JIBRI_RECORDER_PASSWORD=${JIBRI_RECORDER_PASSWORD}
      - JIBRI_XMPP_PASSWORD=${JIBRI_XMPP_PASSWORD}
      - TZ=UTC
      # Load custom webhook module
      - GLOBAL_MODULES=jitsi_webhooks_enhanced
      - GLOBAL_CONFIG=jitsi_webhook_url = "${JITSI_WEBHOOK_URL}"\njitsi_webhook_secret = "${JITSI_WEBHOOK_SECRET}"
      # Room access validation
      - PROSODY_PLUGINS_PATH=/usr/share/jitsi-meet/prosody-plugins-extra
    volumes:
      - jitsi-prosody-config:/config
    networks:
      - infra-network

  # Jicofo (conference focus)
  jitsi-jicofo:
    image: jitsi/jicofo:stable-9258
    container_name: jitsi-jicofo
    restart: unless-stopped
    environment:
      - XMPP_SERVER=jitsi-prosody
      - XMPP_DOMAIN=meet.jitsi
      - XMPP_AUTH_DOMAIN=auth.meet.jitsi
      - XMPP_MUC_DOMAIN=muc.meet.jitsi
      - XMPP_INTERNAL_MUC_DOMAIN=internal-muc.meet.jitsi
      - JICOFO_COMPONENT_SECRET=${JICOFO_COMPONENT_SECRET}
      - JICOFO_AUTH_PASSWORD=${JICOFO_AUTH_PASSWORD}
      - JVB_BREWERY_MUC=jvbbrewery
      - JIBRI_BREWERY_MUC=jibribrewery
      - JIBRI_PENDING_TIMEOUT=90
      - TZ=UTC
    depends_on:
      - jitsi-prosody
    networks:
      - infra-network

  # JVB (video bridge)
  jitsi-jvb:
    image: jitsi/jvb:stable-9258
    container_name: jitsi-jvb
    restart: unless-stopped
    ports:
      - "10000:10000/udp"
      - "4443:4443"
    environment:
      - XMPP_SERVER=jitsi-prosody
      - XMPP_DOMAIN=meet.jitsi
      - XMPP_AUTH_DOMAIN=auth.meet.jitsi
      - XMPP_INTERNAL_MUC_DOMAIN=internal-muc.meet.jitsi
      - JVB_AUTH_PASSWORD=${JVB_AUTH_PASSWORD}
      - JVB_BREWERY_MUC=jvbbrewery
      - JVB_STUN_SERVERS=stun.l.google.com:19302
      - DOCKER_HOST_ADDRESS=${DOCKER_HOST_ADDRESS}
      - JVB_PORT=10000
      - JVB_TCP_HARVESTER_DISABLED=true
      - TZ=UTC
    depends_on:
      - jitsi-prosody
    networks:
      - infra-network

  # Custom Web interface with branding and recording config
  jitsi-web:
    build:
      context: ./jitsi/web
      dockerfile: Dockerfile
    image: justix/jitsi-web:latest
    container_name: jitsi-web
    restart: unless-stopped
    ports:
      - "8443:443"
      - "8001:80"
    environment:
      - ENABLE_AUTH=1
      - ENABLE_GUESTS=1
      - AUTH_TYPE=jwt
      - JWT_APP_ID=jitsi
      - JWT_APP_SECRET=${JWT_APP_SECRET}
      - XMPP_DOMAIN=meet.jitsi
      - XMPP_AUTH_DOMAIN=auth.meet.jitsi
      - XMPP_MUC_DOMAIN=muc.meet.jitsi
      - XMPP_BOSH_URL_BASE=http://jitsi-prosody:5280
      - JICOFO_AUTH_PASSWORD=${JICOFO_AUTH_PASSWORD}
      - PUBLIC_URL=${PUBLIC_URL}
      - ENABLE_RECORDING=1
      - DROPBOX_APPKEY=""
      - DROPBOX_REDIRECT_URI=""
      - ENABLE_FILE_RECORDING_SERVICE=0
      - ENABLE_TRANSCRIPTIONS=0
      - DISABLE_HTTPS=0
      - TZ=UTC
    depends_on:
      - jitsi-prosody
    networks:
      - infra-network

  # Custom Jibri with finalize script (built from Dockerfile)
  jitsi-jibri:
    build:
      context: ./jitsi/jibri
      dockerfile: Dockerfile
    image: justix/jitsi-jibri:latest
    container_name: jitsi-jibri
    restart: unless-stopped
    privileged: true
    environment:
      - XMPP_DOMAIN=meet.jitsi
      - XMPP_AUTH_DOMAIN=auth.meet.jitsi
      - XMPP_INTERNAL_MUC_DOMAIN=internal-muc.meet.jitsi
      - XMPP_RECORDER_DOMAIN=recorder.meet.jitsi
      - XMPP_SERVER=jitsi-prosody
      - JIBRI_BREWERY_MUC=jibribrewery
      - JIBRI_RECORDER_PASSWORD=${JIBRI_RECORDER_PASSWORD}
      - JIBRI_XMPP_PASSWORD=${JIBRI_XMPP_PASSWORD}
      - JIBRI_RECORDING_DIR=/tmp/recordings
      - JIBRI_FINALIZE_RECORDING_SCRIPT_PATH=/usr/local/bin/jibri-finalize.sh
      - JIBRI_STRIP_DOMAIN_JID=muc
      - JIBRI_LOGS_DIR=/var/log/jibri
      - DISPLAY=:0
      - TZ=UTC
    volumes:
      - jitsi-jibri-recordings:/tmp/recordings
      - jitsi-jibri-logs:/var/log/jibri
    depends_on:
      - jitsi-prosody
      - jitsi-jicofo
    networks:
      - infra-network
    shm_size: '2gb'

#---------------------------------------------- Volumes ---------------------------------------------------------------
volumes:
  jitsi-prosody-config:
    driver: local
  jitsi-jibri-recordings:
    driver: local
  jitsi-jibri-logs:
    driver: local

#---------------------------------------------- Networks ---------------------------------------------------------------
networks:
  infra-network:
    driver: bridge
    name: infra-network
